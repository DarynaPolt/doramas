document.addEventListener("DOMContentLoaded", () => {

  // =========================================================
  // 1. üîπ –ü–ª–∞–≤–Ω–∏–π —Å–∫—Ä–æ–ª –¥–æ —Ä–æ–∑–¥—ñ–ª—ñ–≤ (–í–ò–ü–†–ê–í–õ–ï–ù–ù–Ø ReferenceError)
  // –§—É–Ω–∫—Ü—ñ—è –∑–∞–ª–∏—à–∞—î—Ç—å—Å—è –ª–æ–∫–∞–ª—å–Ω–æ—é, –∞–ª–µ –≤–∏–∫–ª–∏–∫–∞—î—Ç—å—Å—è —á–µ—Ä–µ–∑ JS-–æ–±—Ä–æ–±–Ω–∏–∫
  // =========================================================
  function scrollToSection(id) {
    const targetElement = document.getElementById(id);
    if (targetElement) {
        targetElement.scrollIntoView({ behavior: 'smooth' });
    }
  }

  // –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ü–æ—á–∞—Ç–∏ –ø–æ–¥–æ—Ä–æ–∂" (—è–∫–∞ —Ç–µ–ø–µ—Ä –º–∞—î data-target="test")
  const scrollButton = document.querySelector(".scroll-btn");
  if (scrollButton) {
    scrollButton.addEventListener("click", () => {
      const targetId = scrollButton.getAttribute("data-target"); 
      if (targetId) {
        scrollToSection(targetId);
      }
    });
  }

  // –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –ø–æ—Å–∏–ª–∞–Ω—å –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó (<a href="#...">)
  document.querySelectorAll('.nav-links a[href^="#"]').forEach(anchor => {
    anchor.addEventListener('click', function (e) {
      e.preventDefault(); // –ó–∞–±–æ—Ä–æ–Ω—è—î–º–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π –ø–µ—Ä–µ—Ö—ñ–¥
      const targetId = this.getAttribute('href').substring(1); // –û—Ç—Ä–∏–º—É—î–º–æ ID –±–µ–∑ #
      scrollToSection(targetId); // –í–∏–∫–ª–∏–∫–∞—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é
    });
  });

  // =========================================================
  // 2. üîπ –ü—ñ–¥—Å–≤—ñ—á—É–≤–∞–Ω–Ω—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—É–Ω–∫—Ç—É –ø—Ä–∏ —Å–∫—Ä–æ–ª—ñ
  // =========================================================
  const sections = document.querySelectorAll("section");
  const navLinks = document.querySelectorAll(".nav-links a");

  window.addEventListener("scroll", () => {
    let current = "";
    sections.forEach(section => {
      // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ clientBoundingRect –¥–ª—è —Ç–æ—á–Ω—ñ—à–æ–≥–æ –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è
      const rect = section.getBoundingClientRect();
      if (rect.top <= 150 && rect.bottom >= 150) {
        current = section.getAttribute("id");
      }
    });

    navLinks.forEach(link => {
      link.classList.remove("active");
      if (link.getAttribute("href") === `#${current}`) {
        link.classList.add("active");
      }
    });
  });

  // =========================================================
  // 3. üîπ –ë—É—Ä–≥–µ—Ä-–º–µ–Ω—é
  // =========================================================
  const burger = document.getElementById("burger"); // –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—è, —â–æ burger —î —É –≤–∞—à–æ–º—É HTML
  const nav = document.getElementById("nav-links"); // –Ø–∫—â–æ –≤–∏ –º–∞—î—Ç–µ –±—É—Ä–≥–µ—Ä, –æ–±–µ—Ä–Ω—ñ—Ç—å nav-links —É –±–ª–æ–∫ –∑ —Ü–∏–º ID
  if (burger && nav) {
    burger.addEventListener("click", () => {
      nav.classList.toggle("active");
    });
  }

  // üé¨ –í–∏–ø–∞–¥–∫–æ–≤–∞ "–î–æ—Ä–∞–º–∞ –¥–Ω—è"
  const dramas = [
    {
      title: "–ö–æ–ª–∏ —è –ª–µ—á—É –¥–æ —Ç–µ–±–µ",
      desc: "–®—ñ—Å—Ç–Ω–∞–¥—Ü—è—Ç–∏—Ä—ñ—á–Ω–∞ –°—É –ó–∞–π–∑–∞–π, –Ω–∞—Ç—Ö–Ω–µ–Ω–Ω–∞ –≤–∏–ø–∞–¥–∫–æ–≤–æ—é –∑—É—Å—Ç—Ä—ñ—á—á—é, –≤—ñ–¥—á—É–≤–∞—î –±–µ–∑–ø–æ—Ä–∞–¥–Ω–µ –±–∞–∂–∞–Ω–Ω—è –ø–æ–∑–Ω–∞–π–æ–º–∏—Ç–∏—Å—è –∑ –ß–∂–∞–Ω –õ—É—Ä–∞–Ω–æ–º ‚Äî —Ä–æ–∑—É–º–Ω–∏–º, —á–∞—Ä—ñ–≤–Ω–∏–º, –∞–ª–µ –≤—ñ–¥—Å—Ç–æ—Ä–æ–Ω–µ–Ω–∏–º –æ–¥–Ω–æ–∫–ª–∞—Å–Ω–∏–∫–æ–º.",
      img: "images/when_i_fly.jpg"
    },
    {
      title: "–†–æ–∑–ø–ª—É—Ç–∞–Ω–µ –∫–æ—Ö–∞–Ω–Ω—è",
      desc: "1998 —Ä—ñ–∫. –î—ñ–≤—á–∏–Ω–∞ –≤–∏—Ä—ñ—à—É—î –∑—ñ–∑–Ω–∞—Ç–∏—Å—å —É —Å–≤–æ—ó—Ö –ø–æ—á—É—Ç—Ç—è—Ö, –∑–º—ñ–Ω—é—é—á–∏ –≤—Å–µ –∂–∏—Ç—Ç—è. –ê–ª–µ –¥–æ–ª—è –ø—ñ–¥–∫–∏–¥–∞—î —ó–π –Ω–æ–≤—É –∑—É—Å—Ç—Ä—ñ—á ‚Äî —ñ –Ω–æ–≤—É —ñ—Å—Ç–æ—Ä—ñ—é –ø—Ä–æ —Å–ø—Ä–∞–≤–∂–Ω—î –∫–æ—Ö–∞–Ω–Ω—è.",
      img: "images/love_untangled.jpg"
    },
    {
      title: "–ú—ñ–π –∫–æ—Ö–∞–Ω–∏–π –¥–µ–º–æ–Ω",
      desc: "–©–æ–± –ø–æ–≤–µ—Ä–Ω—É—Ç–∏ –≤—Ç—Ä–∞—á–µ–Ω—ñ —Å–∏–ª–∏, –±–µ–∑–∂–∞–ª—å–Ω–∏–π –¥–µ–º–æ–Ω —É–∫–ª–∞–¥–∞—î —É–≥–æ–¥—É —ñ–∑ —Å—É–≤–æ—Ä–æ—é –¥—ñ–≤—á–∏–Ω–æ—é.",
      img: "images/my_demon.jpg"
    },
    {
      title: "–°—è—é—á–∏–π –∫–∞–≤—É–Ω—á–∏–∫",
      desc: "–£ –º–∞–ª–µ–Ω—å–∫–æ–º—É –º—ñ—Å—Ç–µ—á–∫—É –ø—ñ–¥–ª—ñ—Ç–∫–∏ —Å—Ç–≤–æ—Ä—é—é—Ç—å –≥—É—Ä—Ç, —â–æ–± –ø–æ–¥—ñ–ª–∏—Ç–∏—Å—è —Å–≤–æ—î—é –º—É–∑–∏–∫–æ—é –∑—ñ —Å–≤—ñ—Ç–æ–º. –á—Ö –ø–æ—î–¥–Ω—É—é—Ç—å –º—Ä—ñ—ó, –¥—Ä—É–∂–±–∞ —ñ –≤–∏–ø—Ä–æ–±—É–≤–∞–Ω–Ω—è, —â–æ –¥–æ–ø–æ–º–∞–≥–∞—é—Ç—å –∑–Ω–∞–π—Ç–∏ –≤–ª–∞—Å–Ω–∏–π —à–ª—è—Ö –¥–æ —Å–≤—ñ—Ç–ª–∞.",
      img: "images/twinkling_watermelon.jpg"
    },
    {
      title: "–°–∏–ª—å–Ω–∞ –∂—ñ–Ω–∫–∞ –¢–æ –ë–æ–Ω –°—É–Ω",
      desc: "–ë–æ–Ω –°—É–Ω –º–∞—î –Ω–∞–¥–ø—Ä–∏—Ä–æ–¥–Ω—É —Å–∏–ª—É, —è–∫—É –ø—Ä–∏—Ö–æ–≤—É—î –≤—ñ–¥ —É—Å—ñ—Ö.",
      img: "images/do_bong_soon.jpg"
    }
  ];

  const dramaImg = document.querySelector(".drama-img");
  const dramaTitle = document.getElementById("drama-title");
  const dramaDesc = document.getElementById("drama-desc");
// üîπ –§—É–Ω–∫—Ü—ñ—è –ø–æ–∫–∞–∑—É –≤–∏–ø–∞–¥–∫–æ–≤–æ—ó –¥–æ—Ä–∞–º–∏
  function showRandomDrama() {
    const randomDrama = dramas[Math.floor(Math.random() * dramas.length)];

    // –¥–æ–¥–∞—î–º–æ –µ—Ñ–µ–∫—Ç –∑–Ω–∏–∫–∞–Ω–Ω—è –ø–µ—Ä–µ–¥ –∑–º—ñ–Ω–æ—é –∫–∞—Ä—Ç–∏–Ω–∫–∏
    dramaImg.classList.remove("fade-in");
    void dramaImg.offsetWidth; // –•–∞–∫ –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫—É CSS-–∞–Ω—ñ–º–∞—Ü—ñ—ó
    
    // –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ src, title —Ç–∞ desc
      // set a fallback if image doesn't load
      dramaImg.onerror = () => {
        // fallback to site logo if specific drama image missing
        dramaImg.onerror = null; // avoid infinite loop
        dramaImg.src = "images/logo.png";
      };
      dramaImg.src = randomDrama.img;
    dramaTitle.textContent = randomDrama.title;
    dramaDesc.textContent = randomDrama.desc;
    
    dramaImg.classList.add("fade-in");
  }

  // –í–∏–∫–ª–∏–∫–∞—î–º–æ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ —Å—Ç–æ—Ä—ñ–Ω–∫–∏
  if (dramaImg && dramaTitle && dramaDesc) {
      showRandomDrama();
  }
});
const questions = [
  {
    text: "1. –Ø–∫ —Ç–∏ –ª—é–±–∏—à –ø—Ä–æ–≤–æ–¥–∏—Ç–∏ –≤–∏—Ö—ñ–¥–Ω—ñ?",
    answers: ["a) –ê–∫—Ç–∏–≤–Ω–æ, –∑ –µ–º–æ—Ü—ñ—è–º–∏ —ñ –¥—Ä–∞–π–≤–æ–º.", "b) –ù–∞ –∑—É—Å—Ç—Ä—ñ—á–∞—Ö, —É —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—ñ –∑ –ª—é–¥—å–º–∏.", "c) –ù–∞ —Å–æ–Ω—Ü—ñ –∞–±–æ –ø—Ä–æ—Å—Ç–æ –≤–µ—Å–µ–ª–æ.", "d) –ù–∞ –ø—Ä–∏—Ä–æ–¥—ñ, —É —Ç–∏—à—ñ —Å–µ—Ä–µ–¥ –∑–µ–ª–µ–Ω—ñ.", "e) –ü–æ–±—É—Ç–∏ –Ω–∞ —Å–∞–º–æ—Ç—ñ –±—ñ–ª—è –≤–æ–¥–∏ —á–∏ –ø–æ–¥—É–º–∞—Ç–∏.", "f) –ù—ñ—á–æ–≥–æ –∑ —Ü—å–æ–≥–æ –Ω–µ –ø—ñ–¥—Ö–æ–¥–∏—Ç—å."]
  },
  {
    text: "2. –Ø–∫–µ —Å–ª–æ–≤–æ –Ω–∞–π–∫—Ä–∞—â–µ –ø—Ä–æ —Ç–µ–±–µ?",
    answers: ["a) –ü—Ä–∏—Å—Ç—Ä–∞—Å—Ç—å", "b) –¢–µ–ø–ª–æ—Ç–∞", "c) –û–ø—Ç–∏–º—ñ–∑–º", "d) –†—ñ–≤–Ω–æ–≤–∞–≥–∞", "e) –†–æ–∑—É–º / —Å–ø–æ–∫—ñ–π", "f) –ñ–æ–¥–Ω–µ"]
  },
  {
    text: "3. –ö–æ–ª–∏ —â–æ—Å—å —ñ–¥–µ –Ω–µ –∑–∞ –ø–ª–∞–Ω–æ–º, —Ç–∏‚Ä¶",
    answers: ["a) –î—ñ—î—à —Ä—ñ—à—É—á–µ, –Ω–µ –≤–∞–≥–∞—é—á–∏—Å—å.", "b) –®—É–∫–∞—î—à —Å–ø–æ—Å—ñ–± –ø—ñ–¥–Ω—è—Ç–∏ –Ω–∞—Å—Ç—Ä—ñ–π.", "c) –ó–±–µ—Ä—ñ–≥–∞—î—à –ø–æ–∑–∏—Ç–∏–≤ —ñ —Å–º—ñ—î—à—Å—è.", "d) –ó–∞—Å–ø–æ–∫–æ—é—î—à—Å—è —ñ —à—É–∫–∞—î—à –±–∞–ª–∞–Ω—Å.", "e) –ê–Ω–∞–ª—ñ–∑—É—î—à —ñ —Ä–æ–±–∏—à –≤–∏—Å–Ω–æ–≤–∫–∏.", "f) –Ü–≥–Ω–æ—Ä—É—é ‚Äî –º–µ–Ω—ñ –Ω–µ –ø—ñ–¥—Ö–æ–¥–∏—Ç—å –∂–æ–¥–µ–Ω –≤–∞—Ä—ñ–∞–Ω—Ç."]
  },
  {
    text: "4. –Ø–∫–∏–π –ø–µ–π–∑–∞–∂ –Ω–∞–¥–∏—Ö–∞—î –±—ñ–ª—å—à–µ –∑–∞ –≤—Å–µ?",
    answers: ["a) –Ø—Å–∫—Ä–∞–≤–∏–π –∑–∞—Ö—ñ–¥ —Å–æ–Ω—Ü—è.", "b) –ü–æ–ª–µ, –¥–µ –º–æ–∂–Ω–∞ —É—Å–º—ñ—Ö–∞—Ç–∏—Å—è.", "c) –°–æ–Ω—è—á–Ω–∏–π –ø–ª—è–∂ —á–∏ –≥–∞–ª—è–≤–∏–Ω–∞.", "d) –õ—ñ—Å –ø—ñ—Å–ª—è –¥–æ—â—É.", "e) –°–ø–æ–∫—ñ–π–Ω–µ –º–æ—Ä–µ –∞–±–æ –Ω–µ–±–æ.", "f) –ù—ñ—á–æ–≥–æ –∑ —Ü—å–æ–≥–æ."]
  },
  {
    text: "5. –©–æ —Ç–∏ –æ–±–∏—Ä–∞—î—à —É –≤—ñ–ª—å–Ω–∏–π –º–æ–º–µ–Ω—Ç?",
    answers: ["a) –ù–æ–≤—ñ –ø—Ä–∏–≥–æ–¥–∏ —ñ —Ä–∏–∑–∏–∫–∏.", "b) –°–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è, –∂–∞—Ä—Ç–∏, –∫–æ–º–ø–∞–Ω—ñ—é.", "c) –°–æ–Ω—Ü–µ, –ª–µ–≥–∫—ñ—Å—Ç—å.", "d) –ü—Ä–æ–≥—É–ª—è–Ω–∫–∞ –≤ –ø–∞—Ä–∫—É.", "e) –ß–∏—Ç–∞–Ω–Ω—è, —Ä–æ–∑–¥—É–º–∏.", "f) –ñ–æ–¥–µ–Ω –≤–∞—Ä—ñ–∞–Ω—Ç."]
  },
  {
    text: "6. –Ø–∫–∏–π –∫–æ–ª—ñ—Ä —Ç—è–≥–Ω–µ—Ç—å—Å—è –¥–æ —Ç–µ–±–µ —ñ–Ω—Ç—É—ó—Ç–∏–≤–Ω–æ?",
    answers: ["a) –ß–µ—Ä–≤–æ–Ω–∏–π", "b) –ü–æ–º–∞—Ä–∞–Ω—á–µ–≤–∏–π", "c) –ñ–æ–≤—Ç–∏–π", "d) –ó–µ–ª–µ–Ω–∏–π", "e) –°–∏–Ω—ñ–π / –Ü–Ω–¥–∏–≥–æ", "f) –ù—ñ—á–æ–≥–æ –Ω–µ –ø—ñ–¥—Ö–æ–¥–∏—Ç—å"]
  }
];

const startBtn = document.getElementById("start-test-btn");
const testContainer = document.getElementById("test-container");
const questionContainer = document.getElementById("question-container");
const progressDots = document.getElementById("progress-dots");
const resultDiv = document.getElementById("color-result");
const section = document.querySelector(".color-test-section");

let currentQuestion = 0;
let answers = [];

startBtn.addEventListener("click", () => {
  if (startBtn) startBtn.classList.add("hidden");
  if (testContainer) testContainer.classList.remove("hidden");
  if (section) section.style.background = "white"; // ensure white while answering
  loadQuestion();
});

function loadQuestion() {
  // prepare container and progress first so the active dot can animate
  questionContainer.classList.remove('fade-in');
  questionContainer.innerHTML = "";
  resultDiv.classList.add("hidden");

  updateProgress();

  const q = questions[currentQuestion];

  const title = document.createElement("h3");
  title.textContent = q.text;
  questionContainer.appendChild(title);

  q.answers.forEach((ans) => {
    const letter = ans[0];
    // remove visible prefix like "a) " so letters are hidden from UI
    let visibleText = ans;
    if (ans.length > 2 && (ans[1] === ')' || ans[1] === '.')) {
      // common formats: "a) text" or "a. text"
      visibleText = ans.slice(2).trim();
      // also trim a leading punctuation/space if present
      if (visibleText.startsWith(')') || visibleText.startsWith('.')) visibleText = visibleText.slice(1).trim();
    } else if (ans.length > 3 && ans[2] === ')') {
      // fallback for formats like "a) text" if extra spacing
      visibleText = ans.slice(3).trim();
    }

    const btn = document.createElement("button");
    btn.className = "answer";
    btn.textContent = visibleText;
    // keep the letter available for scoring
    btn.setAttribute('data-letter', letter);
    // keep accessibility: announce the hidden letter to screen readers
    btn.setAttribute('aria-label', `${letter}) ${visibleText}`);
    btn.onclick = () => selectAnswer(letter);
    questionContainer.appendChild(btn);
  });

  // restart question fade-in animation
  void questionContainer.offsetWidth; // trigger reflow
  questionContainer.classList.add('fade-in');
}

function updateProgress() {
  progressDots.innerHTML = "";
  for (let i = 0; i < questions.length; i++) {
    const dot = document.createElement("div");
    dot.className = "dot" + (i === currentQuestion ? " active" : "");
    // show the number inside the rectangle
    dot.textContent = i + 1;
    progressDots.appendChild(dot);
  }
}

function selectAnswer(letter) {
  answers.push(letter);
  currentQuestion++;
  if (currentQuestion < questions.length) {
    loadQuestion();
  } else {
    showResult();
  }
}

function showResult() {
  testContainer.classList.remove("hidden");
  questionContainer.innerHTML = "";
  progressDots.innerHTML = "";
  resultDiv.classList.remove("hidden");

  // –ü—ñ–¥—Ä–∞—Ö—É–Ω–æ–∫
  const scores = {
    red: 0, orange: 0, yellow: 0, green: 0,
    blue: 0, indigo: 0, violet: 0, none: 0
  };

  answers.forEach(a => {
    if (a === "a") scores.red += 2;
    if (a === "b") { scores.orange += 2; scores.indigo += 1; }
    if (a === "c") { scores.yellow += 2; scores.violet += 1; }
    if (a === "d") { scores.green += 2; scores.indigo += 1; }
    if (a === "e") { scores.blue += 2; scores.violet += 1; }
    if (a === "f") scores.none += 1;
  });

  let finalColor = Object.entries(scores).sort((a, b) => b[1] - a[1])[0][0];
  if (scores.none >= 3) finalColor = "none";

  let description = "";
  const descriptions = {
    red: "–ß–µ—Ä–≤–æ–Ω–∏–π ‚Äî –µ–Ω–µ—Ä–≥—ñ—è, –ø—Ä–∏—Å—Ç—Ä–∞—Å—Ç—å, –ª—ñ–¥–µ—Ä—Å—Ç–≤–æ.",
    orange: "–ü–æ–º–∞—Ä–∞–Ω—á–µ–≤–∏–π ‚Äî —Ç–µ–ø–ª–∏–π, —Ç–æ–≤–∞—Ä–∏—Å—å–∫–∏–π, –∂–∏—Ç—Ç—î—Ä–∞–¥—ñ—Å–Ω–∏–π.",
    yellow: "–ñ–æ–≤—Ç–∏–π ‚Äî –æ–ø—Ç–∏–º—ñ—Å—Ç, –ª–µ–≥–∫—ñ—Å—Ç—å, –∫—Ä–µ–∞—Ç–∏–≤.",
    green: "–ó–µ–ª–µ–Ω–∏–π ‚Äî –≥–∞—Ä–º–æ–Ω—ñ—è, –ø—Ä–∏—Ä–æ–¥–∞, —Å—Ç–∞–±—ñ–ª—å–Ω—ñ—Å—Ç—å.",
    blue: "–°–∏–Ω—ñ–π ‚Äî –º—É–¥—Ä—ñ—Å—Ç—å, —Å–ø–æ–∫—ñ–π, –ª–æ–≥—ñ–∫–∞.",
    indigo: "–Ü–Ω–¥–∏–≥–æ ‚Äî —ñ–Ω—Ç—É—ó—Ü—ñ—è, –≥–ª–∏–±–∏–Ω–∞, —Ç–∞—î–º–Ω–∏—á—ñ—Å—Ç—å.",
    violet: "–§—ñ–æ–ª–µ—Ç–æ–≤–∏–π ‚Äî —Ç–≤–æ—Ä—á—ñ—Å—Ç—å, –º—Ä—ñ–π–ª–∏–≤—ñ—Å—Ç—å, –º—ñ—Å—Ç–∏–∫–∞.",
    none: "–¢–∏ –ø–æ–∑–∞ —Ä–∞–º–∫–∞–º–∏ ‚Äî —É–≤–µ—Å—å —Å–ø–µ–∫—Ç—Ä –æ–¥—Ä–∞–∑—É üåà"
  };

  description = descriptions[finalColor];
  resultDiv.innerHTML = `<h3>${description}</h3>
  <button id="restart-btn">–ü—Ä–æ–π—Ç–∏ —â–µ —Ä–∞–∑</button>`;

  // üåà –ü–ª–∞–≤–Ω–∞ –ø–∞—Å—Ç–µ–ª—å–Ω–∞ –∞–Ω—ñ–º–∞—Ü—ñ—è ‚Äî –ø–µ—Ä—Å–æ–Ω–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π —Ñ–æ–Ω –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ –∫–æ–ª—å–æ—Ä—É
  const colorClass = `result-${finalColor}`;
  // remove any previous result classes
  const resultClasses = ['result-red','result-orange','result-yellow','result-green','result-blue','result-indigo','result-violet','result-none','colorful-bg'];
  resultClasses.forEach(c => section.classList.remove(c));
  // add chosen class slightly after rendering for smoother transition
  setTimeout(() => {
    // remove inline background override so CSS class background is applied
    if (section && section.style) section.style.background = "";
    section.classList.add(colorClass);
  }, 180);

  // attach restart handler
  const restartEl = document.getElementById("restart-btn");
  if (restartEl) restartEl.addEventListener("click", restartTest);
}

function restartTest() {
  // remove any result-specific classes and keep the test area white again
  const resultClasses = ['result-red','result-orange','result-yellow','result-green','result-blue','result-indigo','result-violet','result-none','colorful-bg'];
  resultClasses.forEach(c => section.classList.remove(c));
  section.style.background = "white";
  currentQuestion = 0;
  answers = [];
  resultDiv.classList.add("hidden");
  loadQuestion();
}

// IntersectionObserver: fade in result background and increase intensity when section enters viewport
if (section) {
  const io = new IntersectionObserver((entries) => {
    entries.forEach(entry => {
      if (entry.isIntersecting) {
        section.classList.add('in-viewport');
      } else {
        section.classList.remove('in-viewport');
      }
    });
  }, { threshold: 0.35 }); // adjust threshold to trigger when roughly a third is visible

  io.observe(section);
}
